package io.taig.blowout

import com.github.difflib.DiffUtils
import com.github.difflib.UnifiedDiffUtils
import sbt.Keys.state
import sbt.io.IO
import sbt.plugins.JvmPlugin
import sbt.{io => _, _}

import java.io.FileNotFoundException
import scala.jdk.CollectionConverters._

object BlowoutPlugin extends AutoPlugin {
  object autoImport extends BlowoutKeys {
    type BlowoutGenerator = io.taig.blowout.BlowoutGenerator
    val BlowoutGenerator = io.taig.blowout.BlowoutGenerator

    type BlowoutComment = io.taig.blowout.BlowoutComment
    val BlowoutComment = io.taig.blowout.BlowoutComment
  }

  import autoImport._

  override def requires: Plugins = JvmPlugin

  override def trigger: PluginTrigger = noTrigger

  override def projectSettings: Seq[Def.Setting[_]] = Def.settings(
    blowoutGenerators := Nil,
    blowoutHeader := List(
      "This file was automatically generated by sbt-blowout and should not be edited manually.",
      "Instead, run blowoutGenerate after making the desired changes to your build definition."
    ),
    blowoutRender := { generator =>
      Some(blowoutHeader.value).filter(_.nonEmpty).flatMap(generator.comment).getOrElse("") + generator.content()
    },
    blowoutGenerate := {
      blowoutGenerators.value.map { generator =>
        IO.write(generator.target, blowoutRender.value(generator))
        generator.target
      }
    },
    blowoutCheck := {
      val log = state.value.log

      blowoutGenerators.value.foreach { generator =>
        try {
          val expected = blowoutRender.value(generator).split("\n").toList
          val actual = IO.readLines(generator.target)

          if (!actual.equals(expected)) {
            log.error("# Expected:")
            expected.foreach(log.error(_))
            log.error("# Actual:")
            actual.foreach(log.error(_))
            log.error("# Diff:")
            val diff = DiffUtils.diff(expected.asJava, actual.asJava)
            val result = UnifiedDiffUtils.generateUnifiedDiff("expected", "actual", expected.asJava, diff, 3)
            result.asScala.toList.foreach(log.error(_))

            sys.error(
              s"${generator.target} does not contain contents that would have been generated by sbt-blowout; try running blowoutGenerate"
            )
          }
        } catch {
          case _: FileNotFoundException => sys.error(s"${generator.target} does not exist; try running blowoutGenerate")
        }
      }
    }
  )
}
